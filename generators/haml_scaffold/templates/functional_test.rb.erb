require 'test_helper'

class <%= controller_class_name %>ControllerTest < ActionController::TestCase

  def setup 
    @<%= singular_name %> = Factory(:<%= singular_name %>)
  end

  should "create <%= singular_name %>" do
    post :create, :<%= file_name %> => { }
    assert_response :redirect
  end

  should "handle failure to create <%= singular_name %>" do
    <%= class_name %>.any_instance.expects(:save).returns(false)
    post :create, :<%= file_name %> => { }
    assert_template "new"
  end

  should "destroy <%= singular_name %>" do
    delete :destroy, :id => @<%= singular_name %>.to_param
    assert_not_nil flash[:notice]    
    assert_response :redirect
  end

  should "handle failure to destroy <%= singular_name %>" do
    <%= class_name %>.any_instance.expects(:destroy).returns(false)    
    delete :destroy, :id => @<%= singular_name %>.to_param
    #assert_not_nil flash[:error]
    assert_response :redirect
  end

  should "get edit for <%= singular_name %>" do
    get :edit, :id => @<%= singular_name %>.to_param
    assert_response :success
  end

  should "get index for <%= plural_name %>" do
    get :index
    assert_response :success
    assert_not_nil assigns(:<%= table_name %>)
  end

  should "get new for <%= singular_name %>" do
    get :new
    assert_response :success
  end

  should "get show for <%= singular_name %>" do
    get :show, :id => @<%= singular_name %>.to_param
    assert_response :success
  end

  should "update <%= singular_name %>" do
    put :update, :id => @<%= singular_name %>.to_param, :<%= file_name %> => { }
    assert_response :redirect
  end

  should "handle failure to update <%= singular_name %>" do
    <%= class_name %>.any_instance.expects(:save).returns(false)
    put :update, :id => @<%= singular_name %>.to_param, :<%= file_name %> => { }
    assert_template "edit"
  end

end